//
//  FavoritesViewController.swift
//  MyCitiesChallenge
//
//  Created by Alejandro isai Acosta Martinez on 07/03/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This layer contains the UI logic (display, update, animate…)
//  and is responsible for intercepting the user’s action and
//  sending it to the Presenter. Most importantly, it has no business logic.
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply Clean Architecture to your iOS projects.
//

import UIKit

protocol FavoritesDisplayLogic: ViewLayer {
    func displayFavorites(cities: [CityList.City])
    func displayFailure(message: String)
}

class FavoritesViewController: UIViewController {
    
    // MARK: - Properties

    var interactor: FavoritesBusinessLogic?
    private var favorites = [CityList.City]() {
        didSet {
            tableView.reloadData()
        }
    }

    // MARK: - Subviews
    
    /// Lazy initialization of the table view to display favorite cities.
    private lazy var tableView: UITableView = {
        let tv = UITableView()
        tv.translatesAutoresizingMaskIntoConstraints = false
        tv.dataSource = self
        tv.delegate = self
        tv.register(CityTableViewCell.self, forCellReuseIdentifier: CityTableViewCell.IDENTIFIER)
        return tv
    }()


    // MARK: - Object Lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    // MARK: - View Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupView()
        self.setupConstraints()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.fetchFavorites()
    }

    // MARK: - Setup

    private func setupView() {
        self.title = "Favorites"
        view.backgroundColor = .white
        navigationController?.navigationBar.prefersLargeTitles = true
        
        view.addSubview(tableView)
    }

    private func setupConstraints() {
        NSLayoutConstraint.activate([
           tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
           tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
           tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
           tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }

    // MARK: - Actions
}

// MARK: - UITableViewDataSource, UITableViewDelegate

extension FavoritesViewController: UITableViewDataSource, UITableViewDelegate {
    /// Returns the number of favorite cities.
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return favorites.count
    }
    
    /// Configures and returns a cell for the favorite city at the given index.
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(
            withIdentifier: CityTableViewCell.IDENTIFIER,
            for: indexPath) as? CityTableViewCell else {
            return UITableViewCell()
        }
        let favoriteCity = favorites[indexPath.row]
        cell.city = favoriteCity
        cell.favoriteChangedAction = { [weak self] in
            self?.interactor?.fetchFavorites()
        }
        return cell
    }
    
    /// Handles selection of a favorite city cell.
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let selectedCity = favorites[indexPath.row]
        interactor?.goToCityDetail(city: selectedCity)
    }
}


// MARK: - Display Logic

extension FavoritesViewController: FavoritesDisplayLogic {
    func displayFavorites(cities: [CityList.City]) {
        self.favorites = cities
    }

    func displayFailure(message: String) {
        print("Something went wrong: \(message)")
    }
}
