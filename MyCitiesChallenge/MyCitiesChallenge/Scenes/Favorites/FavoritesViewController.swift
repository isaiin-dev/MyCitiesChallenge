//
//  FavoritesViewController.swift
//  MyCitiesChallenge
//
//  Created by Alejandro isai Acosta Martinez on 07/03/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This layer contains the UI logic (display, update, animate…)
//  and is responsible for intercepting the user’s action and
//  sending it to the Presenter. Most importantly, it has no business logic.
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply Clean Architecture to your iOS projects.
//

import UIKit

protocol FavoritesDisplayLogic: ViewLayer {
    func displaySomething(viewModel: Favorites.SomeUseCase.ViewModel)
    func displayFailure(message: String)
}

class FavoritesViewController: UIViewController {
    
    // MARK: - Properties

    var interactor: FavoritesBusinessLogic?

    // MARK: - Subviews
    // Place your UI components here (e.g., UILabels, UIButtons, etc.)

    // MARK: - Object Lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    // MARK: - View Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupView()
        self.setupConstraints()

        // Example call to interactor
        interactor?.userInteractionInSomewhere()
    }

    // MARK: - Setup

    private func setupView() {
        // Initialize and configure your subviews here
    }

    private func setupConstraints() {
        // Add and activate your constraints here
        // Example:
        // someView.translatesAutoresizingMaskIntoConstraints = false
        // NSLayoutConstraint.activate([
        //     someView.topAnchor.constraint(equalTo: view.topAnchor),
        //     someView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
        //     ...
        // ])
    }

    // MARK: - Actions
}

// MARK: - Display Logic

extension FavoritesViewController: FavoritesDisplayLogic {
    func displaySomething(viewModel: Favorites.SomeUseCase.ViewModel) {
        // Update the UI with the data from the viewModel
    }

    func displayFailure(message: String) {
        print("Something went wrong: \(message)")
    }
}
