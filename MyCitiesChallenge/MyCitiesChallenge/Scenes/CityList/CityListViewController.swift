//
//  CityListViewController.swift
//  MyCitiesChallenge
//
//  Created by Alejandro isai Acosta Martinez on 05/03/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This layer contains the UI logic (display, update, animate…)
//  and is responsible for intercepting the user’s action and
//  sending it to the Presenter. Most importantly, it has no business logic.
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply Clean Architecture to your iOS projects.
//

import UIKit

protocol CityListDisplayLogic: ViewLayer {
    func displaySomething(viewModel: CityList.SomeUseCase.ViewModel)
    func displayFailure(message: String)
}

class CityListViewController: UIViewController {
    
    // MARK: - Properties
    
    var interactor: CityListBusinessLogic?
    
    private var cities: [String] = ["City 1", "City 2", "City 3", "City 4"]
    
    private var portraitConstraints: [NSLayoutConstraint] = []
    private var landscapeConstraints: [NSLayoutConstraint] = []
    
    // MARK: - Subviews
    
    /// UISearchBar for entering city names with real-time search updates.
    private lazy var searchBar: UISearchBar = {
        let sb = UISearchBar()
        sb.placeholder = "Search for cities..."
        sb.translatesAutoresizingMaskIntoConstraints = false
        sb.delegate = self
        return sb
    }()
    
    /// UITableView to display the list of filtered city results.
    private lazy var tableView: UITableView = {
        let tv = UITableView()
        tv.translatesAutoresizingMaskIntoConstraints = false
        tv.dataSource = self
        tv.delegate = self
        tv.register(UITableViewCell.self, forCellReuseIdentifier: "CityCell")
        return tv
    }()
    
    /// A placeholder UIView with a blue background representing a map view in landscape orientation.
    private lazy var mapPlaceholderView: UIView = {
        let view = UIView()
        view.backgroundColor = .blue
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    // MARK: - Object Lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    // MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        setupConstraints()
        updateLayoutForCurrentOrientation()
        
        // Example call to interactor (replace with actual business logic call)
        interactor?.userInteractionInSomewhere()
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        // Update layout constraints when orientation changes
        super.viewWillTransition(to: size, with: coordinator)
        coordinator.animate(alongsideTransition: { _ in
            self.updateLayoutForSize(size)
        })
    }
    
    // MARK: - Setup Methods
    
    /// Configures the view by adding subviews and setting the background color.
    private func setupView() {
        view.backgroundColor = .white
        
        // Add subviews to the main view
        view.addSubview(searchBar)
        view.addSubview(tableView)
        view.addSubview(mapPlaceholderView)
    }
    
    /// Sets up the Auto Layout constraints for both portrait and landscape orientations.
    private func setupConstraints() {
        portraitConstraints = [
            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            
            tableView.topAnchor.constraint(equalTo: searchBar.bottomAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ]
        
        landscapeConstraints = [
            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            searchBar.trailingAnchor.constraint(equalTo: view.centerXAnchor),
            
            tableView.topAnchor.constraint(equalTo: searchBar.bottomAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.centerXAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            mapPlaceholderView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            mapPlaceholderView.leadingAnchor.constraint(equalTo: view.centerXAnchor),
            mapPlaceholderView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            mapPlaceholderView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ]
    }
    
    /// Activates the appropriate constraints based on the current orientation.
    private func updateLayoutForCurrentOrientation() {
        if view.bounds.width > view.bounds.height {
            NSLayoutConstraint.deactivate(portraitConstraints)
            NSLayoutConstraint.activate(landscapeConstraints)
            mapPlaceholderView.isHidden = false
        } else {
            NSLayoutConstraint.deactivate(landscapeConstraints)
            NSLayoutConstraint.activate(portraitConstraints)
            mapPlaceholderView.isHidden = true
        }
    }
    
    /// Updates the layout constraints based on a given size.
    /// - Parameter size: The new size of the view after orientation change.
    private func updateLayoutForSize(_ size: CGSize) {
        if size.width > size.height {
            NSLayoutConstraint.deactivate(portraitConstraints)
            NSLayoutConstraint.activate(landscapeConstraints)
            mapPlaceholderView.isHidden = false
        } else {
            NSLayoutConstraint.deactivate(landscapeConstraints)
            NSLayoutConstraint.activate(portraitConstraints)
            mapPlaceholderView.isHidden = true
        }
        view.layoutIfNeeded()
    }
}

// MARK: - UISearchBarDelegate
extension CityListViewController: UISearchBarDelegate {
    /// Called when the text in the search bar changes. Updates the table view for real-time search.
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        tableView.reloadData()
    }
}

// MARK: - UITableViewDataSource & UITableViewDelegate
extension CityListViewController: UITableViewDataSource, UITableViewDelegate {
    /// Returns the number of rows in the table view based on the placeholder cities array.
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return cities.count
    }
    
    /// Configures and returns a cell for the given row index.
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CityCell", for: indexPath)
        cell.textLabel?.text = cities[indexPath.row]
        return cell
    }
    
    /// Called when a table row is selected. Notifies the interactor about the selection.
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.userInteractionInSomewhere() 
        tableView.deselectRow(at: indexPath, animated: true)
    }
}
// MARK: - Display Logic

extension CityListViewController: CityListDisplayLogic {
    func displaySomething(viewModel: CityList.SomeUseCase.ViewModel) {
        // Update the UI with the data from the viewModel
    }

    func displayFailure(message: String) {
        print("Something went wrong: \(message)")
    }
}
